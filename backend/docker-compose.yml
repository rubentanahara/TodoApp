services:
  # Development API Service
  notes-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    ports:
      - "8080:80"
      - "8081:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=NotesAppDev;Username=postgres;Password=YourPassword123!;Port=5432;
      - JWT__SecretKey=development-secret-key-not-for-production-use-only-make-it-very-long-and-secure
      - JWT__Issuer=NotesApp
      - JWT__Audience=NotesApp
      - JWT__ExpiryHours=24
      - Cors__AllowedOrigins__0=http://localhost:3000
      - Cors__AllowedOrigins__1=https://localhost:3000
      - Cors__AllowedOrigins__2=http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - app_logs:/app/logs
      - app_uploads:/app/wwwroot/uploads
    working_dir: /app
    networks:
      - notes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: ["dotnet", "watch", "run", "--project", "NotesApp.csproj", "--urls", "http://+:80"]

  # Development Database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=NotesAppDev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=YourPassword123!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - notes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d NotesAppDev"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local

networks:
  notes-network:
    driver: bridge
    name: notes-dev-network 